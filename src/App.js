import React, {useEffect} from "react"
import TodoList from "./Todo/TodoList"
import Context from "./context"
import AddTodo from "./Todo/AddTodo"
import Loader from "./Loader"

// –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
//const AddTodo = React.lazy(() => new Promise(resolve => {    //–æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º—É import
//    setTimeout(() => {
//        resolve(import('./Todo/AddTodo'))
//    }, 3000)
//}))

const styles = {
    h1: {
        color: '#6e4c99',
        display: 'flex',
        justifyContent: 'center'
    },
    p: {
        display: 'flex',
        justifyContent: 'center',
        color: '#6e4c99',
        fontWeight: '600',
        fontSize: '20px'
    },
    h3: {
        fontSize: '12px',
        opacity: '.4',
        color: '#6e4c99',
        display: 'flex',
        justifyContent: 'center'
    }
}

function App() {
    /* useState(Hook) - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤: —Å–æ—Å—Ç–æ—è–Ω–∏–µ; —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
    const [todos, setTodos] = React.useState([])   /* –ø–µ—Ä–µ–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è state */
    // State, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ loading. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ—ç—Ç–æ–º—É –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ true
    const [loading, setLoading] = React.useState(true)

    useEffect(() => {   /* –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä*/
        /* fetch - –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–∫ todos */
        /* ?_limit=5 - query –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 5, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –≤—Å–µ–≥–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
        fetch('https://jsonplaceholder.typicode.com/todos?_limit=0')
            .then(response => response.json())
            .then(todos => {    // –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ todos, –∏ –∏–∑–º–µ–Ω—è–µ–º state. –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ setTodos() –∏ –ø–µ—Ä–µ–¥–∞—ë–º –º–∞—Å—Å–∏–≤ todos
                setTimeout(() => {
                    setTodos(todos)
                    setLoading(false)  // –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞, loader —É–±–µ—Ä–∞–µ—Ç—Å—è
                }, 1000)    // –¥–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 2 —Å–µ–∫
            })
    }, [])  /* –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–ª—É–∂–∏—Ç—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–º—É callback 1 —Ä–∞–∑ */

    function toggleTodo(id) {
        setTodos(todos.map(todo => {
            if (todo.id === id) {
                todo.completed = !todo.completed
            }
            return todo
        })  )
    }

    /* —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∫–∏ */
    function removeTodo(id) {
        setTodos(todos.filter(todo => todo.id !== id))
    }

    function addTodo(title) {   /* –∏–∑–º–µ–Ω–∏—Ç—å state */
        setTodos(todos.concat([{      /* concat() - –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç */
            title: title,
            id: Date.now(),
            completed: false
        }]))
    }

    return (
        <Context.Provider value={{removeTodo}}>
            <div className="header">
                <h3 style={styles.h3}>vard0ni ¬© 2020</h3>
            </div>
            <div className="wrapper">
                <h1 style={styles.h1}>todo app for ladies<span role="img" aria-label="donut">üíú</span></h1>

                {/*<Modal />*/}

                <React.Suspense fallback={<Loader />}>    {/* fallback - —á—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±—É–¥–µ—Ç –≥—Ä—É–∑–∏—Ç—å—Å—è */}
                    <AddTodo onCreate={addTodo}/>  {/* –ø–µ—Ä–µ–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫–æ—Ç–æ—Ä—É—é lazy –ª–æ–∞–¥–∏–º */}
                </React.Suspense>
               {/* <AddTodo onCreate={addTodo}/>*/}

                {/* –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è loading –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ true -> –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç <Loader /> */}
                {loading && <Loader />}
                {todos.length ? (
                    <TodoList todos={todos} onToggle={toggleTodo}/>
                ): loading ? null : (
                    <p style={styles.p}>No todos<span role="img" aria-label="donut">ü§®</span></p>
                )}
            </div>
        </Context.Provider>
  )
}

export default App
